buildscript {
    ext {
        springBootVersion = '2.3.1.RELEASE'
        devonBootVersion = '1.2'
        springCloudVersion = "Hoxton.SR11"
    }
    repositories {
        mavenCentral()
        maven {
            url uri("${projectDir}/lib")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    group = 'devon.boot.poc'
    version = '1.0-SNAPSHOT'

}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = 'https://packages.confluent.io/maven/'
    }
    maven {
        url uri("${projectDir}/lib")
    }
}

def profile = project.hasProperty('profile') ? project.getProperty('profile') : 'local'
println "targetProfile: $profile"

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    allprojects {
        repositories {
            mavenCentral()
            maven {
                url = 'https://packages.confluent.io/maven/'
            }
            maven {
                url = 'https://jitpack.io'
            }

            maven {
                url uri("${projectDir}/../lib")
            }
        }

        dependencyManagement {
            imports {
                mavenBom "devon.boot:devon-boot-dependencies:${devonBootVersion}"
            }
        }

    }

    dependencies {
        //embedded was
        implementation 'lena:spring-boot-starter-lena:1.3.1.2'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'

        //db
        implementation 'org.mariadb.jdbc:mariadb-java-client:1.5.7'

        //lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'

        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    }



    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
}

project(':my-common') {

    bootJar.enabled = false
    jar.enabled = true
}

project(':my-pay') {
    dependencies {
        implementation project(':my-common')
    }
}

project(':my-point') {
    dependencies {
        implementation project(':my-common')
    }
}
